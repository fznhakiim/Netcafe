/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package NCafeManagement;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;


/**
 *
 * @author Arya Prathama
 */
public class PCManagerGUI extends javax.swing.JFrame {
      String Username;
        String Password;
        String loggedInUsername;
  
    /**
     * Creates new form AdminManagerGUI
     */
    public PCManagerGUI() {
        initComponents();
        setTitle("PC Manager");
        this.setLocationRelativeTo(null);
    }
     public PCManagerGUI(String username,String  password) {
         initComponents();
         setTitle("PC Manager");
         this.setLocationRelativeTo(null);

         Username = username;
         Password = password;
         loggedInUsername = username;
     }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        ViewPCButton = new javax.swing.JButton();
        ActivatePCButton = new javax.swing.JButton();
        AddNewPCButton = new javax.swing.JButton();
        PaymentButton = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 153, 0));

        ViewPCButton.setText("View PC");
        ViewPCButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ViewPCButtonMouseClicked(evt);
            }
        });

        ActivatePCButton.setText("Activate a PC");
        ActivatePCButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ActivatePCButtonMouseClicked(evt);
            }
        });

        AddNewPCButton.setText("Add a new PC");
        AddNewPCButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddNewPCButtonMouseClicked(evt);
            }
        });

        PaymentButton.setText("Payment");
        PaymentButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PaymentButtonMouseClicked(evt);
            }
        });

        Back.setText("Back");
        Back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(ViewPCButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(ActivatePCButton)
                .addGap(53, 53, 53)
                .addComponent(AddNewPCButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(PaymentButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ViewPCButton)
                    .addComponent(ActivatePCButton)
                    .addComponent(AddNewPCButton)
                    .addComponent(PaymentButton)
                    .addComponent(Back))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Duration", "Status"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackMouseClicked
        AfterLoginGui afterLoginGui = new AfterLoginGui(loggedInUsername, Password);
        afterLoginGui.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackMouseClicked


    private void ViewPCButtonMouseClicked(java.awt.event.MouseEvent evt) {

        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/warned_db", "root", "");
            Statement statement = connection.createStatement();

            ResultSet resultSet = statement.executeQuery("SELECT * FROM tb_pc");

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {
                String pc = resultSet.getString("kode_pc");
                String duration = resultSet.getString("duration");
                String status = resultSet.getString("status");

                model.addRow(new Object[]{pc,duration,status});
            }

            resultSet.close();
            statement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect to database.");
        }

    }




    Connection Con = null;
    PreparedStatement pst = null;
    ResultSet Rs = null;
    Statement St = null;


    private void ActivatePCButtonMouseClicked(java.awt.event.MouseEvent evt) {
        String idInput = JOptionPane.showInputDialog(this, "Enter the PC's ID: ");

        if (idInput != null && !idInput.isEmpty()) {
            try {
                String ID = idInput.trim();

               
                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/warned_db", "root", "");
                PreparedStatement preparedStatement = connection.prepareStatement("SELECT status FROM tb_pc WHERE kode_pc = ?");
                preparedStatement.setString(1, ID);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    String currentStatus = resultSet.getString("status");

                    if ("Available".equalsIgnoreCase(currentStatus)) {
                 
                        String durationInput = JOptionPane.showInputDialog(this, "Enter the customer's duration (in HH:mm:ss format): ");
                        if (durationInput != null && !durationInput.isEmpty()) {
                         
                            Time duration = Time.valueOf(durationInput);

                      
                            PreparedStatement updateStatement = connection.prepareStatement("UPDATE tb_pc SET duration = ?, status = 'Occupied' WHERE kode_pc = ?");
                            updateStatement.setTime(1, duration);
                            updateStatement.setString(2, ID);
                            int rowsAffected = updateStatement.executeUpdate();

                            if (rowsAffected > 0) {
                                JOptionPane.showMessageDialog(this, "PC activated successfully!");
                            } else {
                                JOptionPane.showMessageDialog(this, "Failed to activate PC.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "No duration input provided!", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "PC is not available for activation.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "PC ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
                }

               
                resultSet.close();
                preparedStatement.close();
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Failed to connect to database.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No ID input provided!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String getAdminType(String username) {
        String adminType = "";

        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/warned_db", "root", "");
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT Status FROM tb_username WHERE Username = '" + username + "'");

            if (resultSet.next()) {
                adminType = resultSet.getString("Status");
            }
            resultSet.close();
            statement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return adminType;

    }




    private void AddNewPCButtonMouseClicked(java.awt.event.MouseEvent evt) {
        String assignId = JOptionPane.showInputDialog(this, "Assign ID to the new PC: ");

        if (assignId != null && !assignId.isEmpty()) {
            try {
                String ID = assignId.trim();

                // Melakukan koneksi ke database
                Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/warned_db", "root", "");
                PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO tb_pc (kode_pc, status, duration) VALUES (?,?,?)");

                // Assign ID PC baru
                preparedStatement.setString(1,ID);
                preparedStatement.setString(2,"Available");
                Time duration = Time.valueOf("00:00:00");
                preparedStatement.setTime(3,duration);
                


                // Jalankan pernyataan SQL untuk menyimpan PC baru ke dalam database
                int rowsAffected = preparedStatement.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "New PC added successfully!");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to add new PC.", "Error", JOptionPane.ERROR_MESSAGE);
                }

                // Tutup koneksi dan pernyataan
                preparedStatement.close();
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Failed to connect to database.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No ID input provided!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }







    private void PaymentButtonMouseClicked(java.awt.event.MouseEvent evt) {
   PaymentGUI paymentGUI = new PaymentGUI();
   paymentGUI.setVisible(true);
   this.dispose();
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PCManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PCManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PCManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PCManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PCManagerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActivatePCButton;
    private javax.swing.JButton AddNewPCButton;
    private javax.swing.JButton Back;
    private javax.swing.JButton PaymentButton;
    private javax.swing.JButton ViewPCButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
